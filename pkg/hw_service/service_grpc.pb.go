// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/service.proto

package hw_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HomeworkService_GetPost_FullMethodName       = "/homework_service.HomeworkService/GetPost"
	HomeworkService_AddPost_FullMethodName       = "/homework_service.HomeworkService/AddPost"
	HomeworkService_UpdatePost_FullMethodName    = "/homework_service.HomeworkService/UpdatePost"
	HomeworkService_RemovePost_FullMethodName    = "/homework_service.HomeworkService/RemovePost"
	HomeworkService_AddComment_FullMethodName    = "/homework_service.HomeworkService/AddComment"
	HomeworkService_RemoveComment_FullMethodName = "/homework_service.HomeworkService/RemoveComment"
)

// HomeworkServiceClient is the client API for HomeworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeworkServiceClient interface {
	GetPost(ctx context.Context, in *PostRequestWithId, opts ...grpc.CallOption) (*PostResponseWithEntity, error)
	AddPost(ctx context.Context, in *PostRequestWithEntity, opts ...grpc.CallOption) (*PostResponseWithEntity, error)
	UpdatePost(ctx context.Context, in *PostRequestWithEntity, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemovePost(ctx context.Context, in *PostRequestWithId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddComment(ctx context.Context, in *CommentRequestWithEntity, opts ...grpc.CallOption) (*CommentResponseWithEntity, error)
	RemoveComment(ctx context.Context, in *CommentRequestWithId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type homeworkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeworkServiceClient(cc grpc.ClientConnInterface) HomeworkServiceClient {
	return &homeworkServiceClient{cc}
}

func (c *homeworkServiceClient) GetPost(ctx context.Context, in *PostRequestWithId, opts ...grpc.CallOption) (*PostResponseWithEntity, error) {
	out := new(PostResponseWithEntity)
	err := c.cc.Invoke(ctx, HomeworkService_GetPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkServiceClient) AddPost(ctx context.Context, in *PostRequestWithEntity, opts ...grpc.CallOption) (*PostResponseWithEntity, error) {
	out := new(PostResponseWithEntity)
	err := c.cc.Invoke(ctx, HomeworkService_AddPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkServiceClient) UpdatePost(ctx context.Context, in *PostRequestWithEntity, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HomeworkService_UpdatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkServiceClient) RemovePost(ctx context.Context, in *PostRequestWithId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HomeworkService_RemovePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkServiceClient) AddComment(ctx context.Context, in *CommentRequestWithEntity, opts ...grpc.CallOption) (*CommentResponseWithEntity, error) {
	out := new(CommentResponseWithEntity)
	err := c.cc.Invoke(ctx, HomeworkService_AddComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeworkServiceClient) RemoveComment(ctx context.Context, in *CommentRequestWithId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HomeworkService_RemoveComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeworkServiceServer is the server API for HomeworkService service.
// All implementations must embed UnimplementedHomeworkServiceServer
// for forward compatibility
type HomeworkServiceServer interface {
	GetPost(context.Context, *PostRequestWithId) (*PostResponseWithEntity, error)
	AddPost(context.Context, *PostRequestWithEntity) (*PostResponseWithEntity, error)
	UpdatePost(context.Context, *PostRequestWithEntity) (*emptypb.Empty, error)
	RemovePost(context.Context, *PostRequestWithId) (*emptypb.Empty, error)
	AddComment(context.Context, *CommentRequestWithEntity) (*CommentResponseWithEntity, error)
	RemoveComment(context.Context, *CommentRequestWithId) (*emptypb.Empty, error)
	mustEmbedUnimplementedHomeworkServiceServer()
}

// UnimplementedHomeworkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHomeworkServiceServer struct {
}

func (UnimplementedHomeworkServiceServer) GetPost(context.Context, *PostRequestWithId) (*PostResponseWithEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedHomeworkServiceServer) AddPost(context.Context, *PostRequestWithEntity) (*PostResponseWithEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPost not implemented")
}
func (UnimplementedHomeworkServiceServer) UpdatePost(context.Context, *PostRequestWithEntity) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedHomeworkServiceServer) RemovePost(context.Context, *PostRequestWithId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePost not implemented")
}
func (UnimplementedHomeworkServiceServer) AddComment(context.Context, *CommentRequestWithEntity) (*CommentResponseWithEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedHomeworkServiceServer) RemoveComment(context.Context, *CommentRequestWithId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveComment not implemented")
}
func (UnimplementedHomeworkServiceServer) mustEmbedUnimplementedHomeworkServiceServer() {}

// UnsafeHomeworkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeworkServiceServer will
// result in compilation errors.
type UnsafeHomeworkServiceServer interface {
	mustEmbedUnimplementedHomeworkServiceServer()
}

func RegisterHomeworkServiceServer(s grpc.ServiceRegistrar, srv HomeworkServiceServer) {
	s.RegisterService(&HomeworkService_ServiceDesc, srv)
}

func _HomeworkService_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequestWithId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeworkServiceServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeworkService_GetPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeworkServiceServer).GetPost(ctx, req.(*PostRequestWithId))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeworkService_AddPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequestWithEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeworkServiceServer).AddPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeworkService_AddPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeworkServiceServer).AddPost(ctx, req.(*PostRequestWithEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeworkService_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequestWithEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeworkServiceServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeworkService_UpdatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeworkServiceServer).UpdatePost(ctx, req.(*PostRequestWithEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeworkService_RemovePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequestWithId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeworkServiceServer).RemovePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeworkService_RemovePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeworkServiceServer).RemovePost(ctx, req.(*PostRequestWithId))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeworkService_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequestWithEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeworkServiceServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeworkService_AddComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeworkServiceServer).AddComment(ctx, req.(*CommentRequestWithEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeworkService_RemoveComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequestWithId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeworkServiceServer).RemoveComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomeworkService_RemoveComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeworkServiceServer).RemoveComment(ctx, req.(*CommentRequestWithId))
	}
	return interceptor(ctx, in, info, handler)
}

// HomeworkService_ServiceDesc is the grpc.ServiceDesc for HomeworkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HomeworkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "homework_service.HomeworkService",
	HandlerType: (*HomeworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPost",
			Handler:    _HomeworkService_GetPost_Handler,
		},
		{
			MethodName: "AddPost",
			Handler:    _HomeworkService_AddPost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _HomeworkService_UpdatePost_Handler,
		},
		{
			MethodName: "RemovePost",
			Handler:    _HomeworkService_RemovePost_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _HomeworkService_AddComment_Handler,
		},
		{
			MethodName: "RemoveComment",
			Handler:    _HomeworkService_RemoveComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/service.proto",
}
