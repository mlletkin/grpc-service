// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repository "gitlab.ozon.dev/kavkazov/homework-8/internal/pkg/repository"
)

// MockPostsRepo is a mock of PostsRepo interface.
type MockPostsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPostsRepoMockRecorder
}

// MockPostsRepoMockRecorder is the mock recorder for MockPostsRepo.
type MockPostsRepoMockRecorder struct {
	mock *MockPostsRepo
}

// NewMockPostsRepo creates a new mock instance.
func NewMockPostsRepo(ctrl *gomock.Controller) *MockPostsRepo {
	mock := &MockPostsRepo{ctrl: ctrl}
	mock.recorder = &MockPostsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostsRepo) EXPECT() *MockPostsRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPostsRepo) Add(ctx context.Context, entity *repository.Post) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, entity)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockPostsRepoMockRecorder) Add(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPostsRepo)(nil).Add), ctx, entity)
}

// GetByID mocks base method.
func (m *MockPostsRepo) GetByID(ctx context.Context, id int64) (*repository.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*repository.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPostsRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPostsRepo)(nil).GetByID), ctx, id)
}

// Remove mocks base method.
func (m *MockPostsRepo) Remove(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockPostsRepoMockRecorder) Remove(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockPostsRepo)(nil).Remove), ctx, id)
}

// Update mocks base method.
func (m *MockPostsRepo) Update(ctx context.Context, entity *repository.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPostsRepoMockRecorder) Update(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPostsRepo)(nil).Update), ctx, entity)
}

// MockCommentsRepo is a mock of CommentsRepo interface.
type MockCommentsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCommentsRepoMockRecorder
}

// MockCommentsRepoMockRecorder is the mock recorder for MockCommentsRepo.
type MockCommentsRepoMockRecorder struct {
	mock *MockCommentsRepo
}

// NewMockCommentsRepo creates a new mock instance.
func NewMockCommentsRepo(ctrl *gomock.Controller) *MockCommentsRepo {
	mock := &MockCommentsRepo{ctrl: ctrl}
	mock.recorder = &MockCommentsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentsRepo) EXPECT() *MockCommentsRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCommentsRepo) Add(ctx context.Context, entity *repository.Comment) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, entity)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockCommentsRepoMockRecorder) Add(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCommentsRepo)(nil).Add), ctx, entity)
}

// GetMany mocks base method.
func (m *MockCommentsRepo) GetMany(ctx context.Context, id int64) ([]repository.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", ctx, id)
	ret0, _ := ret[0].([]repository.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockCommentsRepoMockRecorder) GetMany(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockCommentsRepo)(nil).GetMany), ctx, id)
}

// Remove mocks base method.
func (m *MockCommentsRepo) Remove(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockCommentsRepoMockRecorder) Remove(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockCommentsRepo)(nil).Remove), ctx, id)
}
